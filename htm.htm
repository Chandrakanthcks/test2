<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üêç Interactive Python Pyramid Generator üêç</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Courier New', monospace;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            color: #333;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .controls {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .control-group label {
            font-weight: bold;
            color: #555;
        }

        .control-group input, .control-group select {
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .control-group input:focus, .control-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .generate-btn {
            grid-column: 1 / -1;
            padding: 15px 30px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .generate-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
        }

        .output-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
        }

        .pyramid-output {
            background: #1a1a1a;
            color: #00ff00;
            padding: 20px;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            overflow-x: auto;
            min-height: 200px;
            border: 2px solid #333;
            position: relative;
        }

        .pyramid-output::before {
            content: attr(data-title);
            position: absolute;
            top: -12px;
            left: 20px;
            background: #1a1a1a;
            color: #00ff00;
            padding: 0 10px;
            font-size: 14px;
            font-weight: bold;
        }

        .color-controls {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-top: 10px;
        }

        .color-preview {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: 2px solid #ddd;
            cursor: pointer;
        }

        @keyframes glow {
            0% { text-shadow: 0 0 5px currentColor; }
            50% { text-shadow: 0 0 20px currentColor; }
            100% { text-shadow: 0 0 5px currentColor; }
        }

        .glowing {
            animation: glow 2s ease-in-out infinite;
        }

        .stats {
            margin-top: 20px;
            padding: 15px;
            background: #e3f2fd;
            border-radius: 8px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üêç Interactive Pyramid Generator üêç</h1>
            <p>Create beautiful ASCII pyramids with custom parameters! TEst</p>
        </div>

        <div class="controls">
            <div class="control-group">
                <label for="height">Pyramid Height:</label>
                <input type="range" id="height" min="3" max="15" value="6">
                <span id="heightValue">6</span>
            </div>

            <div class="control-group">
                <label for="pattern">Pattern Type:</label>
                <select id="pattern">
                    <option value="star">Star Pyramid</option>
                    <option value="number">Number Pyramid</option>
                    <option value="hollow">Hollow Pyramid</option>
                    <option value="inverted">Inverted Pyramid</option>
                    <option value="diamond">Diamond Pattern</option>
                    <option value="pascal">Pascal's Triangle</option>
                </select>
            </div>

            <div class="control-group">
                <label for="character">Custom Character:</label>
                <input type="text" id="character" maxlength="1" value="*" placeholder="*">
            </div>

            <div class="control-group">
                <label for="spacing">Spacing:</label>
                <input type="range" id="spacing" min="1" max="5" value="1">
                <span id="spacingValue">1</span>
            </div>

            <div class="control-group">
                <label>Animation:</label>
                <div class="color-controls">
                    <label><input type="checkbox" id="animate"> Enable Glow</label>
                    <input type="color" id="textColor" value="#00ff00" class="color-preview">
                </div>
            </div>

            <button class="generate-btn" onclick="generatePyramid()">üöÄ Generate Pyramid</button>
        </div>

        <div class="output-section">
            <div class="pyramid-output" id="output1" data-title="Current Pattern"></div>
            <div class="pyramid-output" id="output2" data-title="Preview Gallery"></div>
        </div>

        <div class="stats" id="stats"></div>
    </div>

    <script>
        // Update slider values in real-time
        document.getElementById('height').addEventListener('input', function() {
            document.getElementById('heightValue').textContent = this.value;
        });

        document.getElementById('spacing').addEventListener('input', function() {
            document.getElementById('spacingValue').textContent = this.value;
        });

        document.getElementById('textColor').addEventListener('change', function() {
            const outputs = document.querySelectorAll('.pyramid-output');
            outputs.forEach(output => {
                output.style.color = this.value;
            });
        });

        function generateStarPyramid(height, char, spacing) {
            let result = "";
            const spaceChar = " ".repeat(spacing);
            
            for (let i = 0; i < height; i++) {
                const spaces = " ".repeat((height - i - 1) * spacing);
                const stars = (char + spaceChar).repeat(2 * i + 1).slice(0, -spacing);
                result += spaces + stars + "\n";
            }
            return result;
        }

        function generateNumberPyramid(height, spacing) {
            let result = "";
            const spaceChar = " ".repeat(spacing);
            
            for (let i = 1; i <= height; i++) {
                const spaces = " ".repeat((height - i) * spacing);
                let numbers = "";
                for (let j = 1; j <= i; j++) {
                    numbers += j + spaceChar;
                }
                result += spaces + numbers.trim() + "\n";
            }
            return result;
        }

        function generateHollowPyramid(height, char, spacing) {
            let result = "";
            const spaceChar = " ".repeat(spacing);
            
            for (let i = 0; i < height; i++) {
                const spaces = " ".repeat((height - i - 1) * spacing);
                if (i === 0) {
                    result += spaces + char + "\n";
                } else if (i === height - 1) {
                    const stars = (char + spaceChar).repeat(2 * i + 1).slice(0, -spacing);
                    result += spaces + stars + "\n";
                } else {
                    const middle = " ".repeat((2 * i - 1) * spacing);
                    result += spaces + char + middle + char + "\n";
                }
            }
            return result;
        }

        function generateInvertedPyramid(height, char, spacing) {
            let result = "";
            const spaceChar = " ".repeat(spacing);
            
            for (let i = height; i > 0; i--) {
                const spaces = " ".repeat((height - i) * spacing);
                const stars = (char + spaceChar).repeat(2 * i - 1).slice(0, -spacing);
                result += spaces + stars + "\n";
            }
            return result;
        }

        function generateDiamond(height, char, spacing) {
            let result = "";
            
            // Upper half
            for (let i = 0; i < height; i++) {
                const spaces = " ".repeat((height - i - 1) * spacing);
                const stars = (char + " ".repeat(spacing)).repeat(2 * i + 1).slice(0, -spacing);
                result += spaces + stars + "\n";
            }
            
            // Lower half
            for (let i = height - 2; i >= 0; i--) {
                const spaces = " ".repeat((height - i - 1) * spacing);
                const stars = (char + " ".repeat(spacing)).repeat(2 * i + 1).slice(0, -spacing);
                result += spaces + stars + "\n";
            }
            
            return result;
        }

        function generatePascalTriangle(height) {
            let result = "";
            
            for (let i = 0; i < height; i++) {
                const spaces = " ".repeat((height - i - 1) * 2);
                let row = "";
                let coeff = 1;
                
                for (let j = 0; j <= i; j++) {
                    row += coeff.toString().padStart(3) + " ";
                    coeff = Math.floor(coeff * (i - j) / (j + 1));
                }
                
                result += spaces + row + "\n";
            }
            
            return result;
        }

        function generatePyramid() {
            const height = parseInt(document.getElementById('height').value);
            const pattern = document.getElementById('pattern').value;
            const character = document.getElementById('character').value || '*';
            const spacing = parseInt(document.getElementById('spacing').value);
            const animate = document.getElementById('animate').checked;
            
            let result = "";
            let stats = "";
            
            switch (pattern) {
                case 'star':
                    result = generateStarPyramid(height, character, spacing);
                    stats = `Star Pyramid: ${height} rows, ${2 * height - 1} max width`;
                    break;
                case 'number':
                    result = generateNumberPyramid(height, spacing);
                    stats = `Number Pyramid: ${height} rows, ${height} max numbers`;
                    break;
                case 'hollow':
                    result = generateHollowPyramid(height, character, spacing);
                    stats = `Hollow Pyramid: ${height} rows, ${4 * height - 2} total characters`;
                    break;
                case 'inverted':
                    result = generateInvertedPyramid(height, character, spacing);
                    stats = `Inverted Pyramid: ${height} rows, ${2 * height - 1} max width`;
                    break;
                case 'diamond':
                    result = generateDiamond(height, character, spacing);
                    stats = `Diamond Pattern: ${2 * height - 1} total rows`;
                    break;
                case 'pascal':
                    result = generatePascalTriangle(height);
                    stats = `Pascal's Triangle: ${height} rows, largest number: ${Math.pow(2, height-1)}`;
                    break;
            }
            
            const output1 = document.getElementById('output1');
            output1.textContent = result;
            
            if (animate) {
                output1.classList.add('glowing');
            } else {
                output1.classList.remove('glowing');
            }
            
            // Generate preview gallery
            const output2 = document.getElementById('output2');
            const miniHeight = Math.min(4, height);
            let gallery = "Mini Previews:\n\n";
            gallery += "Star:\n" + generateStarPyramid(miniHeight, '*', 1) + "\n";
            gallery += "Hollow:\n" + generateHollowPyramid(miniHeight, '*', 1) + "\n";
            gallery += "Numbers:\n" + generateNumberPyramid(miniHeight, 1);
            
            output2.textContent = gallery;
            
            // Update stats
            document.getElementById('stats').innerHTML = `
                <strong>üìä Pattern Statistics:</strong><br>
                ${stats}<br>
                <small>Character count: ${result.replace(/\s/g, '').length} | Lines: ${result.split('\n').length - 1}</small>
            `;
        }

        // Generate initial pyramid
        generatePyramid();

        // Auto-generate on input changes
        document.querySelectorAll('input, select').forEach(element => {
            element.addEventListener('change', generatePyramid);
            if (element.type === 'range') {
                element.addEventListener('input', generatePyramid);
            }
        });
    </script>
</body>
</html>